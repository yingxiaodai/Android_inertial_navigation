空指针检查
  空指针是一种不受编程语言检查的运行时异常，只能由程序员主动通过逻辑判断来避免，但即使是最出色的程序员，也不可能将所有潜在的空指针异常全部考虑到。


  public void doStudy(Study study) {
      study.readBooks();
      study.doHomework();
  }

  这段Java代码安全吗？不一定，因为这要取决于调用方传入的参数是什么，如果我们向doStudy()方法传入了一个null参数，那么毫无疑问这里就会发生空指针异常。因此，更加稳妥的做法是在调用参数的方法之前先进行一个判空处理，如下所示：

  public void doStudy(Study study) {
      if (study != null) {
          study.readBooks();
          study.doHomework();
      }
  }
1. 可空类型系统
  Kotlin中引入了一个可空类型系统的概念，它利用编译时判空检查的机制几乎杜绝了空指针异常。

  fun doStudy(study: Study) {
      study.readBooks()
      study.doHomework()
  }

  这段代码看上去和刚才的Java版本并没有什么区别，但实际上它是没有空指针风险的，因为Kotlin默认所有的参数和变量都不可为空，所以这里传入的Study参数也一定不会为空，可以放心地调用它的任何函数。

  Kotlin提供了另外一套可为空的类型系统，就是在类名的后面加上一个问号。比如，Int表示不可为空的整型，而Int?就表示可为空的整型；String表示不可为空的字符串，而String?就表示可为空的字符串。

  使用可为空的类型系统时，需要在编译时期就把所有的空指针异常都处理掉才行。
2.判空辅助工具
   Kotlin提供了一系列的辅助工具，使开发者能够更轻松地进行判空处理。

  ?. 操作符表示当对象不为空时正常调用相应的方法，当对象为空时则什么都不做。比如：

  if (a != null) {
      a.doSomething()
  }

  这段代码使用?.操作符就可以简化成：

  a?.doSomething()
  ============================================================================
  ?: 操作符表示如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。比如：

  val c = if (a ! = null) {
      a
  } else {
      b
  }

  这段代码的逻辑使用?:操作符就可以简化成：

  val c = a ?: b
=============================================================================
  结合使用?.操作符和let函数也可以对多次重复调用的某个变量统一进行判空处理：
  
  fun doStudy(study: Study?) {
      study?.let {
          it.readBooks()
          it.doHomework()
      }
  }
 ==============================================================================
  非空断言工具：！！
  在对象后面加上！！，即认定该对象不会为空，但是该写法存在风险。
  
  tips：
  1.字符串内嵌表达式
  在Kotlin中，我们可以直接将表达式写在字符串里面，即使是构建非常复杂的字符串，也会变得轻而易举。

  Kotlin中字符串内嵌表达式的语法规则如下：

  "hello, ${obj.name}. nice to meet you!"

  当表达式中仅有一个变量的时候，还可以将两边的大括号省略：

  "hello, $name. nice to meet you!"

  2.函数的参数默认值
  Kotlin允许在定义函数的时候给任意参数设定一个默认值，这样当调用此函数时就不会强制要求调用方为此参数传值，在没有传值的情况下会自动使用参数的默认值。语法格式如下：

  fun printParams(num: Int, str: String = "hello") {
      println("num is $num , str is $str")
  }

  这里给printParams()函数的第二个参数设定了一个默认值，这样当调用printParams()函数时，可以选择给第二个参数传值，也可以选择不传，在不传的情况下就会自动使用默认值。

  
  
  
